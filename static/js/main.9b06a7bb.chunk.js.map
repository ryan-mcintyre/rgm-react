{"version":3,"sources":["Me.png","BioTimeline.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BioTimeline","events","this","props","content","component","EventBubble","Component","className","title","description","App","contactInfo","platform","url","BioSidebar","contacts","map","contact","index","key","href","rel","src","Me","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,gC,uOCIrCC,G,uLACQ,IACEC,EAAWC,KAAKC,MAAMF,OAAtBA,OAER,OACI,kBAAC,IAAD,CAAmBG,QAASH,EAAQI,UAAWC,Q,GALjCC,cAUpBD,EAAc,SAAAH,GAChB,OACI,yBAAKK,UAAU,aACX,2BAAIL,EAAMF,OAAOQ,OACjB,2BAAIN,EAAMF,OAAOS,eAKdV,ICnBTW,E,2MACFC,YAAc,CACV,CACIC,SAAU,WACVC,IAAK,8CAET,CACID,SAAU,SACVC,IAAK,qC,EAIbb,OAAS,CACL,CACIQ,MAAO,mBACPC,YAAa,0CAEjB,CACID,MAAO,mBACPC,YAAa,4FAEjB,CACID,MAAO,YACPC,YAAa,8KAEjB,CACID,MAAO,gBACPC,YAAa,iEAEjB,CACID,MAAO,+BACPC,YAAa,+DAEjB,CACID,MAAO,kBACPC,YAAa,0DAEjB,CACID,MAAO,6BACPC,YAAa,oD,wEAKjB,OACI,yBAAKF,UAAU,WACX,kBAAC,EAAD,CAAYI,YAAaV,KAAKU,cAC9B,kBAAC,EAAD,CAAaX,OAAQC,KAAKD,c,GA/CxBM,aAqDZQ,EAAa,SAAAZ,GAAU,IACjBa,EAAab,EAAMS,YAAYK,KAAI,SAACC,EAASC,GACjD,OACI,wBAAIC,IAAKD,GACL,4BACI,uBACIX,UAAU,UACVa,KAAMH,EAAQJ,IACdQ,IAAI,uBAEPJ,EAAQL,eATjBG,SAgBR,OACI,yBAAKR,UAAU,cACX,yBAAKe,IAAKC,IAAIhB,UAAU,SAASiB,IAAI,OACrC,+BACI,+BACKT,MAONL,IC1EKe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b06a7bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Me.743232b5.png\";","import React, { Component } from 'react';\nimport RepeaterComponent from 'repeater-react';\nimport './App.css';\n\nclass BioTimeline extends Component {\n    render() {\n        const { events } = this.props.events\n\n        return (\r\n            <RepeaterComponent content={events} component={EventBubble} />\r\n        )\r\n    }\n}\n\nconst EventBubble = props => {\n    return (\n        <div className=\"eventCont\">\n            <p>{props.events.title}</p>\n            <p>{props.events.description}</p>\n        </div>\n   )\r\n}\n\nexport default BioTimeline;\n","import React, { Component } from 'react';\nimport Me from './Me.png';\nimport BioTimeline from './BioTimeline';\n\nclass App extends Component {\n    contactInfo = [\r\n        {\r\n            platform: 'LinkedIn',\r\n            url: 'https://www.linkedin.com/in/ryangmcintyre/'\r\n        },\r\n        {\r\n            platform: 'GitHub',\r\n            url: 'https://github.com/ryan-mcintyre'\r\n        }\r\n    ]\r\n\r\n    events = [\r\n        {\r\n            title: 'Hello World v1.0',\r\n            description: 'I was born in Midland, Michigan, 1994.'\r\n        },\r\n        {\r\n            title: 'Hello World v2.0',\r\n            description: 'I began programming in high school. I joined the programming club during my senior year.'\r\n        },\r\n        {\r\n            title: 'Go Green!',\r\n            description: 'I enrolled at Michigan State University, majoring in mechanical engineering. After one semester, having taken one computer science class, I switched my major to Comp Sci.'\r\n        },\r\n        {\r\n            title: 'On Wisconsin?',\r\n            description: 'I worked as an intern for Epic Systems in Madison, Wisconsin.'\r\n        },\r\n        {\r\n            title: 'Mission Graduation: Complete',\r\n            description: 'I graduated from the Michigan State Honors College in 2016.'\r\n        },\r\n        {\r\n            title: 'An Epic Journey',\r\n            description: 'After graduating, I started at Epic Systems full time.'\r\n        },\r\n        {\r\n            title: '...to infinity and beyond!',\r\n            description: 'I\\'m ready to start the next part of my journey.'\r\n        }\r\n    ]\n\n    render() {\n        return (\n            <div className=\"bioCont\">\n                <BioSidebar contactInfo={this.contactInfo} />\n                <BioTimeline events={this.events} />\n            </div>\n        );\n    }\n}\n\nconst BioSidebar = props => {\n    const { contacts } = props.contactInfo.map((contact, index) => {\n        return (\r\n            <tr key={index}>\r\n                <td>\r\n                    <a\r\n                        className=\"bioLink\"\n                        href={contact.url}\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                    {contact.platform}\r\n                    </a>\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\n\n    return (\n        <div className=\"bioSidebar\">\n            <img src={Me} className=\"bioPic\" alt=\"Me\" />\n            <table>\n                <tbody>\n                    {contacts}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}